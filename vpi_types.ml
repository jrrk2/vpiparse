
(******************************** OBJECT TYPES ********************************)

let vpi_obj = function
| 1 -> "vpiAlways" (* always procedure *)
| 2 -> "vpiAssignStmt" (* quasi-continuous assignment *)
| 3 -> "vpiAssignment" (* procedural assignment *)
| 4 -> "vpiBegin" (* block statement *)
| 5 -> "vpiCase" (* case statement *)
| 6 -> "vpiCaseItem" (* case statement item *)
| 7 -> "vpiConstant" (* numerical constant or string literal *)
| 8 -> "vpiContAssign" (* continuous assignment *)
| 9 -> "vpiDeassign" (* deassignment statement *)
| 10 -> "vpiDefParam" (* defparam *)
| 11 -> "vpiDelayControl" (* delay statement (e.g., #10) *)
| 12 -> "vpiDisable" (* named block disable statement *)
| 13 -> "vpiEventControl" (* wait on event, e.g., @e *)
| 14 -> "vpiEventStmt" (* event trigger, e.g., ->e *)
| 15 -> "vpiFor" (* for statement *)
| 16 -> "vpiForce" (* force statement *)
| 17 -> "vpiForever" (* forever statement *)
| 18 -> "vpiFork" (* fork-join block *)
| 19 -> "vpiFuncCall" (* function call *)
| 20 -> "vpiFunction" (* function *)
| 21 -> "vpiGate" (* primitive gate *)
| 22 -> "vpiIf" (* if statement *)
| 23 -> "vpiIfElse" (* if-else statement *)
| 24 -> "vpiInitial" (* initial procedure *)
| 25 -> "vpiIntegerVar" (* integer variable *)
| 26 -> "vpiInterModPath" (* intermodule wire delay *)
| 27 -> "vpiIterator" (* iterator *)
| 28 -> "vpiIODecl" (* input/output declaration *)
| 29 -> "vpiMemory" (* behavioral memory *)
| 30 -> "vpiMemoryWord" (* single word of memory *)
| 31 -> "vpiModPath" (* module path for path delays *)
| 32 -> "vpiModule" (* module instance *)
| 33 -> "vpiNamedBegin" (* named block statement *)
| 34 -> "vpiNamedEvent" (* event variable *)
| 35 -> "vpiNamedFork" (* named fork-join block *)
| 36 -> "vpiNet" (* scalar or vector net *)
| 37 -> "vpiNetBit" (* bit of vector net *)
| 38 -> "vpiNullStmt" (* a semicolon. Ie. #10 ; *)
| 39 -> "vpiOperation" (* behavioral operation *)
| 40 -> "vpiParamAssign" (* module parameter assignment *)
| 41 -> "vpiParameter" (* module parameter *)
| 42 -> "vpiPartSelect" (* part-select *)
| 43 -> "vpiPathTerm" (* terminal of module path *)
| 44 -> "vpiPort" (* module port *)
| 45 -> "vpiPortBit" (* bit of vector module port *)
| 46 -> "vpiPrimTerm" (* primitive terminal *)
| 47 -> "vpiRealVar" (* real variable *)
| 48 -> "vpiReg" (* scalar or vector reg *)
| 49 -> "vpiRegBit" (* bit of vector reg *)
| 50 -> "vpiRelease" (* release statement *)
| 51 -> "vpiRepeat" (* repeat statement *)
| 52 -> "vpiRepeatControl" (* repeat control in an assign stmt *)
| 53 -> "vpiSchedEvent" (* vpi_put_value() event *)
| 54 -> "vpiSpecParam" (* specparam *)
| 55 -> "vpiSwitch" (* transistor switch *)
| 56 -> "vpiSysFuncCall" (* system function call *)
| 57 -> "vpiSysTaskCall" (* system task call *)
| 58 -> "vpiTableEntry" (* UDP state table entry *)
| 59 -> "vpiTask" (* task *)
| 60 -> "vpiTaskCall" (* task call *)
| 61 -> "vpiTchk" (* timing check *)
| 62 -> "vpiTchkTerm" (* terminal of timing check *)
| 63 -> "vpiTimeVar" (* time variable *)
| 64 -> "vpiTimeQueue" (* simulation event queue *)
| 65 -> "vpiUdp" (* user-defined primitive *)
| 66 -> "vpiUdpDefn" (* UDP definition *)
| 67 -> "vpiUserSystf" (* user-defined system task/function *)
| 68 -> "vpiVarSelect" (* variable array selection *)
| 69 -> "vpiWait" (* wait statement *)
| 70 -> "vpiWhile" (* while statement *)

(********************** object types added with 1364-2001 *********************)

| 105 -> "vpiAttribute" (* attribute of an object *)
| 106 -> "vpiBitSelect" (* Bit-select of parameter, var select *)
| 107 -> "vpiCallback" (* callback object *)
| 108 -> "vpiDelayTerm" (* Delay term which is a load or driver *)
| 109 -> "vpiDelayDevice" (* Delay object within a net *)
| 110 -> "vpiFrame" (* reentrant task/func frame *)
| 111 -> "vpiGateArray" (* gate instance array *)
| 112 -> "vpiModuleArray" (* module instance array *)
| 113 -> "vpiPrimitiveArray" (* vpiprimitiveArray type *)
| 114 -> "vpiNetArray" (* multidimensional net *)
| 115 -> "vpiRange" (* range declaration *)
| 116 -> "vpiRegArray" (* multidimensional reg *)
| 117 -> "vpiSwitchArray" (* switch instance array *)
| 118 -> "vpiUdpArray" (* UDP instance array *)
| 128 -> "vpiContAssignBit" (* Bit of a vector continuous assignment *)
| 129 -> "vpiNamedEventArray" (* multidimensional named event *)

(********************** object types added with 1364-2005 *********************)

| 130 -> "vpiIndexedPartSelect" (* Indexed part-select object *)
| 133 -> "vpiGenScopeArray" (* array of generated scopes *)
| 134 -> "vpiGenScope" (* A generated scope *)
| 135 -> "vpiGenVar" (* Object used to instantiate gen scopes *)

(*********************************** METHODS **********************************)
(**************** methods used to traverse 1 to 1 relationships ***************)

let vpi_meth = function
| 71 -> "vpiCondition" (* condition expression *)
| 72 -> "vpiDelay" (* net or gate delay *)
| 73 -> "vpiElseStmt" (* else statement *)
| 74 -> "vpiForIncStmt" (* increment statement in for loop *)
| 75 -> "vpiForInitStmt" (* initialization statement in for loop *)
| 76 -> "vpiHighConn" (* higher connection to port *)
| 77 -> "vpiLhs" (* left-hand side of assignment *)
| 78 -> "vpiIndex" (* index of var select, bit-select, etc. *)
| 79 -> "vpiLeftRange" (* left range of vector or part-select *)
| 80 -> "vpiLowConn" (* lower connection to port *)
| 81 -> "vpiParent" (* parent object *)
| 82 -> "vpiRhs" (* right-hand side of assignment *)
| 83 -> "vpiRightRange" (* right range of vector or part-select *)
| 84 -> "vpiScope" (* containing scope object *)
| 85 -> "vpiSysTfCall" (* task function call *)
| 86 -> "vpiTchkDataTerm" (* timing check data term *)
| 87 -> "vpiTchkNotifier" (* timing check notifier *)
| 88 -> "vpiTchkRefTerm" (* timing check reference term *)

(************* methods used to traverse 1 to many relationships ***************)

| 89 -> "vpiArgument" (* argument to (system) task/function *)
| 90 -> "vpiBit" (* bit of vector net or port *)
| 91 -> "vpiDriver" (* driver for a net *)
| 92 -> "vpiInternalScope" (* internal scope in module *)
| 93 -> "vpiLoad" (* load on net or reg *)
| 94 -> "vpiModDataPathIn" (* data terminal of a module path *)
| 95 -> "vpiModPathIn" (* Input terminal of a module path *)
| 96 -> "vpiModPathOut" (* output terminal of a module path *)
| 97 -> "vpiOperand" (* operand of expression *)
| 98 -> "vpiPortInst" (* connected port instance *)
| 99 -> "vpiProcess" (* process in module, program or interface *)
| 100 -> "vpiVariables" (* variables in module *)
| 101 -> "vpiUse" (* usage *)

(******** methods which can traverse 1 to 1, or 1 to many relationships *******)

| 102 -> "vpiExpr" (* connected expression *)
| 103 -> "vpiPrimitive" (* primitive (gate, switch, UDP) *)
| 104 -> "vpiStmt" (* statement in process or task *)

(************************ methods added with 1364-2001 ************************)

| 119 -> "vpiActiveTimeFormat" (* active $timeformat() system task *)
| 120 -> "vpiInTerm" (* To get to a delay device's drivers. *)
| 121 -> "vpiInstanceArray" (* vpiInstance arrays *)
| 122 -> "vpiLocalDriver" (* local drivers (within a module *)
| 123 -> "vpiLocalLoad" (* local loads (within a module *)
| 124 -> "vpiOutTerm" (* To get to a delay device's loads. *)
| 125 -> "vpiPorts" (* Module port *)
| 126 -> "vpiSimNet" (* simulated net after collapsing *)
| 127 -> "vpiTaskFunc" (* task/function *)

(************************ methods added with 1364-2005 ************************)

| 131 -> "vpiBaseExpr" (* Indexed part-select's base expression *)
| 132 -> "vpiWidthExpr" (* Indexed part-select's width expression *)

(************************ methods added with 1800-2009 ************************)

| 136 -> "vpiAutomatics" (* Automatic variables of a frame *)

(********************************* PROPERTIES *********************************)
(************************** generic object properties *************************)

let vpi_prop = function
| -1 -> "vpiUndefined" (* undefined property *)
| 1 -> "vpiType" (* type of object *)
| 2 -> "vpiName" (* local name of object *)
| 3 -> "vpiFullName" (* full hierarchical name *)
| 4 -> "vpiSize" (* size of gate, net, port, etc. *)
| 5 -> "vpiFile" (* File name in which the object is used*)
| 6 -> "vpiLineNo" (* line number where the object is used *)

(***************************** module properties ******************************)

| 7 -> "vpiTopModule" (* top-level module (Boolean) *)
| 8 -> "vpiCellInstance" (* cell (Boolean) *)
| 9 -> "vpiDefName" (* module definition name *)
| 10 -> "vpiProtected" (* source protected module (Boolean) *)
| 11 -> "vpiTimeUnit" (* module time unit *)
| 12 -> "vpiTimePrecision" (* module time precision *)
| 13 -> "vpiDefNetType" (* default net type *)
| 14 -> "vpiUnconnDrive" (* unconnected port drive strength *)
| 1 -> "vpiHighZ" (* No default drive given *)
| 2 -> "vpiPull1" (* default pull1 drive *)
| 3 -> "vpiPull0" (* default pull0 drive *)
| 15 -> "vpiDefFile" (* File name where the module is defined*)
| 16 -> "vpiDefLineNo" (* line number for module definition *)
| 47 -> "vpiDefDelayMode" (* Default delay mode for a module *)
| 1 -> "vpiDelayModeNone" (* no delay mode specified *)
| 2 -> "vpiDelayModePath" (* path delay mode *)
| 3 -> "vpiDelayModeDistrib" (* distributed delay mode *)
| 4 -> "vpiDelayModeUnit" (* unit delay mode *)
| 5 -> "vpiDelayModeZero" (* zero delay mode *)
| 6 -> "vpiDelayModeMTM" (* min:typ:max delay mode *)
| 48 -> "vpiDefDecayTime" (* Default decay time for a module *)

(*************************** port and net properties **************************)

let vpi_port_net = function
| 17 -> "vpiScalar" (* scalar (Boolean) *)
| 18 -> "vpiVector" (* vector (Boolean) *)
| 19 -> "vpiExplicitName" (* port is explicitly named *)
| 20 -> "vpiDirection" (* direction of port: *)
| 1 -> "vpiInput" (* input *)
| 2 -> "vpiOutput" (* output *)
| 3 -> "vpiInout" (* inout *)
| 4 -> "vpiMixedIO" (* mixed input-output *)
| 5 -> "vpiNoDirection" (* no direction *)
| 21 -> "vpiConnByName" (* connected by name (Boolean) *)

| 22 -> "vpiNetType" (* net subtypes: *)
| 1 -> "vpiWire" (* wire net *)
| 2 -> "vpiWand" (* wire-and net *)
| 3 -> "vpiWor" (* wire-or net *)
| 4 -> "vpiTri" (* tri net *)
| 5 -> "vpiTri0" (* pull-down net *)
| 6 -> "vpiTri1" (* pull-up net *)
| 7 -> "vpiTriReg" (* three-state reg net *)
| 8 -> "vpiTriAnd" (* three-state wire-and net *)
| 9 -> "vpiTriOr" (* three-state wire-or net *)
| 10 -> "vpiSupply1" (* supply-1 net *)
| 11 -> "vpiSupply0" (* supply-0 net *)
| 12 -> "vpiNone" (* no default net type (1364-2001) *)
| 13 -> "vpiUwire" (* unresolved wire net (1364-2005) *)

| 23 -> "vpiExplicitScalared" (* explicitly scalared (Boolean) *)
| 24 -> "vpiExplicitVectored" (* explicitly vectored (Boolean) *)
| 25 -> "vpiExpanded" (* expanded vector net (Boolean) *)
| 26 -> "vpiImplicitDecl" (* implicitly declared net (Boolean) *)
| 27 -> "vpiChargeStrength" (* charge decay strength of net *)

(*************************** port and net properties **************************)

|  17 -> "vpiScalar" (* scalar (Boolean) *)
|  18 -> "vpiVector" (* vector (Boolean) *)
|  19 -> "vpiExplicitName" (* port is explicitly named *)
|  20 -> "vpiDirection" (* direction of port: *)
|  1 -> "vpiInput" (* input *)
|  2 -> "vpiOutput" (* output *)
|  3 -> "vpiInout" (* inout *)
|  4 -> "vpiMixedIO" (* mixed input-output *)
|  5 -> "vpiNoDirection" (* no direction *)
|  21 -> "vpiConnByName" (* connected by name (Boolean) *)

|  22 -> "vpiNetType" (* net subtypes: *)
|  1 -> "vpiWire" (* wire net *)
|  2 -> "vpiWand" (* wire-and net *)
|  3 -> "vpiWor" (* wire-or net *)
|  4 -> "vpiTri" (* tri net *)
|  5 -> "vpiTri0" (* pull-down net *)
|  6 -> "vpiTri1" (* pull-up net *)
|  7 -> "vpiTriReg" (* three-state reg net *)
|  8 -> "vpiTriAnd" (* three-state wire-and net *)
|  9 -> "vpiTriOr" (* three-state wire-or net *)
|  10 -> "vpiSupply1" (* supply-1 net *)
|  11 -> "vpiSupply0" (* supply-0 net *)
|  12 -> "vpiNone" (* no default net type (1364-2001) *)
|  13 -> "vpiUwire" (* unresolved wire net (1364-2005) *)

|  23 -> "vpiExplicitScalared" (* explicitly scalared (Boolean) *)
|  24 -> "vpiExplicitVectored" (* explicitly vectored (Boolean) *)
|  25 -> "vpiExpanded" (* expanded vector net (Boolean) *)
|  26 -> "vpiImplicitDecl" (* implicitly declared net (Boolean) *)
|  27 -> "vpiChargeStrength" (* charge decay strength of net *)

|  28 -> "vpiArray" (* variable array (Boolean) *)
|  29 -> "vpiPortIndex" (* Port index *)

(************************ gate and terminal properties ************************)

let vpi_gate_term = function
|  30 -> "vpiTermIndex" (* Index of a primitive terminal *)
|  31 -> "vpiStrength0" (* 0-strength of net or gate *)
|  32 -> "vpiStrength1" (* 1-strength of net or gate *)
|  33 -> "vpiPrimType" (* primitive subtypes: *)
|  1 -> "vpiAndPrim" (* and gate *)
|  2 -> "vpiNandPrim" (* nand gate *)
|  3 -> "vpiNorPrim" (* nor gate *)
|  4 -> "vpiOrPrim" (* or gate *)
|  5 -> "vpiXorPrim" (* xor gate *)
|  6 -> "vpiXnorPrim" (* xnor gate *)
|  7 -> "vpiBufPrim" (* buffer *)
|  8 -> "vpiNotPrim" (* not gate *)
|  9 -> "vpiBufif0Prim" (* zero-enabled buffer *)
|  10 -> "vpiBufif1Prim" (* one-enabled buffer *)
|  11 -> "vpiNotif0Prim" (* zero-enabled not gate *)
|  12 -> "vpiNotif1Prim" (* one-enabled not gate *)
|  13 -> "vpiNmosPrim" (* nmos switch *)
|  14 -> "vpiPmosPrim" (* pmos switch *)
|  15 -> "vpiCmosPrim" (* cmos switch *)
|  16 -> "vpiRnmosPrim" (* resistive nmos switch *)
|  17 -> "vpiRpmosPrim" (* resistive pmos switch *)
|  18 -> "vpiRcmosPrim" (* resistive cmos switch *)
|  19 -> "vpiRtranPrim" (* resistive bidirectional *)
|  20 -> "vpiRtranif0Prim" (* zero-enable resistive bidirectional *)
|  21 -> "vpiRtranif1Prim" (* one-enable resistive bidirectional *)
|  22 -> "vpiTranPrim" (* bidirectional *)
|  23 -> "vpiTranif0Prim" (* zero-enabled bidirectional *)
|  24 -> "vpiTranif1Prim" (* one-enabled bidirectional *)
|  25 -> "vpiPullupPrim" (* pullup *)
|  26 -> "vpiPulldownPrim" (* pulldown *)
|  27 -> "vpiSeqPrim" (* sequential UDP *)
|  28 -> "vpiCombPrim" (* combinational UDP *)

(**************** path, path terminal, timing check properties ****************)

let vpi_path = function
|  34 -> "vpiPolarity" (* polarity of module path... *)
|  35 -> "vpiDataPolarity" (* ...or data path: *)
|  1 -> "vpiPositive" (* positive *)
|  2 -> "vpiNegative" (* negative *)
|  3 -> "vpiUnknown" (* unknown (unspecified) *)

|  36 -> "vpiEdge" (* edge type of module path: *)
|  37 -> "vpiPosedge" (* path delay connection subtypes: *)
|  1 -> "vpiPathFull" (* ( a *> b ) *)
|  2 -> "vpiPathParallel" (* ( a => b ) *)

|  38 -> "vpiTchkType" (* timing check subtypes: *)
|  1 -> "vpiSetup" (* $setup *)
|  2 -> "vpiHold" (* $hold *)
|  3 -> "vpiPeriod" (* $period *)
|  4 -> "vpiWidth" (* $width *)
|  5 -> "vpiSkew" (* $skew *)
|  6 -> "vpiRecovery" (* $recovery *)
|  7 -> "vpiNoChange" (* $nochange *)
|  8 -> "vpiSetupHold" (* $setuphold *)
|  9 -> "vpiFullskew" (* $fullskew -- added for 1364-2001 *)
|  10 -> "vpiRecrem" (* $recrem -- added for 1364-2001 *)
|  11 -> "vpiRemoval" (* $removal -- added for 1364-2001 *)
|  12 -> "vpiTimeskew" (* $timeskew -- added for 1364-2001 *)

(**************************** expression properties ***************************)

let vpi_expr = function
|  39 -> "vpiOpType" (* operation subtypes: *)
|  1 -> "vpiMinusOp" (* unary minus *)
|  2 -> "vpiPlusOp" (* unary plus *)
|  3 -> "vpiNotOp" (* unary not *)
|  4 -> "vpiBitNegOp" (* bitwise negation *)
|  5 -> "vpiUnaryAndOp" (* bitwise reduction AND *)
|  6 -> "vpiUnaryNandOp" (* bitwise reduction NAND *)
|  7 -> "vpiUnaryOrOp" (* bitwise reduction OR *)
|  8 -> "vpiUnaryNorOp" (* bitwise reduction NOR *)
|  9 -> "vpiUnaryXorOp" (* bitwise reduction XOR *)
|  10 -> "vpiUnaryXNorOp" (* bitwise reduction XNOR *)
|  11 -> "vpiSubOp" (* binary subtraction *)
|  12 -> "vpiDivOp" (* binary division *)
|  13 -> "vpiModOp" (* binary modulus *)
|  14 -> "vpiEqOp" (* binary equality *)
|  15 -> "vpiNeqOp" (* binary inequality *)
|  16 -> "vpiCaseEqOp" (* case (x and z) equality *)
|  17 -> "vpiCaseNeqOp" (* case inequality *)
|  18 -> "vpiGtOp" (* binary greater than *)
|  19 -> "vpiGeOp" (* binary greater than or equal *)
|  20 -> "vpiLtOp" (* binary less than *)
|  21 -> "vpiLeOp" (* binary less than or equal *)
|  22 -> "vpiLShiftOp" (* binary left shift *)
|  23 -> "vpiRShiftOp" (* binary right shift *)
|  24 -> "vpiAddOp" (* binary addition *)
|  25 -> "vpiMultOp" (* binary multiplication *)
|  26 -> "vpiLogAndOp" (* binary logical AND *)
|  27 -> "vpiLogOrOp" (* binary logical OR *)
|  28 -> "vpiBitAndOp" (* binary bitwise AND *)
|  29 -> "vpiBitOrOp" (* binary bitwise OR *)
|  30 -> "vpiBitXorOp" (* binary bitwise XOR *)
|  31 -> "vpiBitXNorOp" (* binary bitwise XNOR *)
|  32 -> "vpiConditionOp" (* ternary conditional *)
|  33 -> "vpiConcatOp" (* n-ary concatenation *)
|  34 -> "vpiMultiConcatOp" (* repeated concatenation *)
|  35 -> "vpiEventOrOp" (* event OR *)
|  36 -> "vpiNullOp" (* null operation *)
|  37 -> "vpiListOp" (* list of expressions *)
|  38 -> "vpiMinTypMaxOp" (* min:typ:max: delay expression *)
|  39 -> "vpiPosedgeOp" (* posedge *)
|  40 -> "vpiNegedgeOp" (* negedge *)
|  41 -> "vpiArithLShiftOp" (* arithmetic left shift (1364-2001) *)
|  42 -> "vpiArithRShiftOp" (* arithmetic right shift (1364-2001) *)
|  43 -> "vpiPowerOp" (* arithmetic power op (1364-2001) *)

|  40 -> "vpiConstType" (* constant subtypes: *)
|  1 -> "vpiDecConst" (* decimal integer *)
|  2 -> "vpiRealConst" (* real *)
|  3 -> "vpiBinaryConst" (* binary integer *)
|  4 -> "vpiOctConst" (* octal integer *)
|  5 -> "vpiHexConst" (* hexadecimal integer *)
|  6 -> "vpiStringConst" (* string literal *)
|  7 -> "vpiIntConst" (* integer constant (1364-2001) *)
|  8 -> "vpiTimeConst" (* time constant *)
|  9 -> "vpiUIntConst" (* unsigned integer constant !!! NOT Standard !!! *)
|  41 -> "vpiBlocking" (* blocking assignment (Boolean) *)
|  42 -> "vpiCaseType" (* case statement subtypes: *)
|  1 -> "vpiCaseExact" (* exact match *)
|  2 -> "vpiCaseX" (* ignore X's *)
|  3 -> "vpiCaseZ" (* ignore Z's *)
|  43 -> "vpiNetDeclAssign" (* assign part of decl (Boolean) *)

(************************** task/function properties **************************)

let vpi_task_func = function
|  44 -> "vpiFuncType" (* function & system function type *)
|  1 -> "vpiIntFunc" (* returns integer *)
|  2 -> "vpiRealFunc" (* returns real *)
|  3 -> "vpiTimeFunc" (* returns time *)
|  4 -> "vpiSizedFunc" (* returns an arbitrary size *)
|  5 -> "vpiSizedSignedFunc" (* returns sized signed value *)

(** alias 1364-1995 system function subtypes to 1364-2001 function subtypes ***)

|  45 -> "vpiUserDefn" (*user-defined system task/func(Boolean)*)
|  46 -> "vpiScheduled" (* object still scheduled (Boolean) *)

(*********************** properties added with 1364-2001 **********************)

|  49 -> "vpiActive" (* reentrant task/func frame is active *)
|  50 -> "vpiAutomatic" (* task/func obj is automatic *)
|  51 -> "vpiCell" (* configuration cell *)
|  52 -> "vpiConfig" (* configuration config file *)
|  53 -> "vpiConstantSelect" (* (Boolean) bit-select or part-select indices are constant expressions *)
|  54 -> "vpiDecompile" (* decompile the object *)
|  55 -> "vpiDefAttribute" (* Attribute defined for the obj *)
|  56 -> "vpiDelayType" (* delay subtype *)
|  1 -> "vpiModPathDelay" (* module path delay *)
|  2 -> "vpiInterModPathDelay" (* intermodule path delay *)
|  3 -> "vpiMIPDelay" (* module input port delay *)
|  57 -> "vpiIteratorType" (* object type of an iterator *)
|  58 -> "vpiLibrary" (* configuration library *)
|  60 -> "vpiOffset" (* offset from LSB *)
|  61 -> "vpiResolvedNetType" (* net subtype after resolution, returns same subtypes as vpiNetType *)
|  62 -> "vpiSaveRestartID" (* unique ID for save/restart data *)
|  63 -> "vpiSaveRestartLocation" (* name of save/restart data file *)
|  64 -> "vpiValid" (* reentrant task/func frame or automatic variable is valid *)
|  70 -> "vpiLocalParam" (* TRUE when a param is declared as a localparam *)
|  71 -> "vpiModPathHasIfNone" (* Mod path has an ifnone statement *)

(*********************** properties added with 1364-2005 **********************)

|  72 -> "vpiIndexedPartSelectType" (* Indexed part-select type *)
|  1 -> "vpiPosIndexed" (* +: *)
|  2 -> "vpiNegIndexed" (* -: *)
|  73 -> "vpiIsMemory" (* TRUE for a one-dimensional reg array *)
|  74 -> "vpiIsProtected" (* TRUE for protected design information *)

(*************** vpi_control() constants (added with 1364-2001) ***************)

|  66 -> "vpiStop" (* execute simulator's $stop *)
|  67 -> "vpiFinish" (* execute simulator's $finish *)
|  68 -> "vpiReset" (* execute simulator's $reset *)
|  69 -> "vpiSetInteractiveScope" (* set simulator's interactive scope *)



