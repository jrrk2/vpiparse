library(yosys_cells) {
  /* Threshold Definitions */
  slew_lower_threshold_pct_fall         : 30.00 ;
  slew_lower_threshold_pct_rise         : 30.00 ;
  slew_upper_threshold_pct_fall         : 70.00 ;
  slew_upper_threshold_pct_rise         : 70.00 ;
  slew_derate_from_library              : 1.00 ;
  input_threshold_pct_fall              : 50.00 ;
  input_threshold_pct_rise              : 50.00 ;
  output_threshold_pct_fall             : 50.00 ;
  output_threshold_pct_rise             : 50.00 ;
  default_leakage_power_density         : 0.00 ;
  default_cell_leakage_power            : 0.00 ;

  /* Default Pin Attributes */
  default_inout_pin_cap                 : 1.000000;
  default_input_pin_cap                 : 1.000000;
  default_output_pin_cap                : 0.000000;
  default_fanout_load                   : 1.000000;
  default_max_transition                : 0.200000;

	cell(_ANDNOT_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(A*(B)')"; }
	}
	cell(_AND_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(A*B)"; }
	}
	cell(_AOI3_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(C) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(((A*B)+C))'"; }
	}
	cell(_AOI4_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(C) { direction: input; }
	  pin(D) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(((A*B)+(C*D)))'"; }
	}
	cell(_BUF_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(Y) { direction: output;
		   function: "A"; }
	}
	cell(_DFF_PP0_) {
		ff(IQ, IQN) {
			clocked_on: "C";
			next_state: "D";
			clear: "R";
		}
	  area: 6;
	  pin(D) { direction: input; }
		pin(C) { direction: input; clock: true; }
	  pin(R) { direction: input; }
		pin(Q) { direction: output; function: "IQ"; }
	}
	cell(_DFF_PP1_) {
		ff(IQ, IQN) {
			clocked_on: "C";
			next_state: "D";
			preset: "R";
		}
	  area: 6;
	  pin(D) { direction: input; }
		pin(C) { direction: input; clock: true; }
	  pin(R) { direction: input; }
		pin(Q) { direction: output; function: "IQ"; }
	}
	cell(_MUX16_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(C) { direction: input; }
	  pin(D) { direction: input; }
	  pin(E) { direction: input; }
	  pin(F) { direction: input; }
	  pin(G) { direction: input; }
	  pin(H) { direction: input; }
	  pin(I) { direction: input; }
	  pin(J) { direction: input; }
	  pin(K) { direction: input; }
	  pin(L) { direction: input; }
	  pin(M) { direction: input; }
	  pin(N) { direction: input; }
	  pin(O) { direction: input; }
	  pin(P) { direction: input; }
	  pin(S) { direction: input; }
	  pin(T) { direction: input; }
	  pin(U) { direction: input; }
	  pin(V) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((V * ((U * ((T * ((S * A) | (B * S'))) | (((S * C) | (D * S')) * T'))) | (((T * ((S * E) | (F * S'))) | (((S * G) | (H * S')) * T')) * U'))) | (((U * ((T * ((S * I) | (J * S'))) | (((S * K) | (L * S')) * T'))) | (((T * ((S * M) | (N * S'))) | (((S * O) | (P * S')) * T')) * U')) * V'))"; }
	}
	cell(_MUX4_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(C) { direction: input; }
	  pin(D) { direction: input; }
	  pin(S) { direction: input; }
	  pin(T) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((T * ((S * A) | (B * S'))) | (((S * C) | (D * S')) * T'))"; }
	}
	cell(_MUX8_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(C) { direction: input; }
	  pin(D) { direction: input; }
	  pin(E) { direction: input; }
	  pin(F) { direction: input; }
	  pin(G) { direction: input; }
	  pin(H) { direction: input; }
	  pin(S) { direction: input; }
	  pin(T) { direction: input; }
	  pin(U) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((U * ((T * ((S * A) | (B * S'))) | (((S * C) | (D * S')) * T'))) | (((T * ((S * E) | (F * S'))) | (((S * G) | (H * S')) * T')) * U'))"; }
	}
	cell(_MUX_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(S) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((S * A) | (B * S'))"; }
	}
	cell(_NAND_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((A*B))'"; }
	}
	cell(_NMUX_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(S) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((S * (A)') | ((B)' * S'))"; }
	}
	cell(_NOR_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((A+B))'"; }
	}
	cell(_NOT_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(A)'"; }
	}
	cell(_OAI3_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(C) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(((A+B)*C))'"; }
	}
	cell(_OAI4_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(C) { direction: input; }
	  pin(D) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(((A+B)*(C+D)))'"; }
	}
	cell(_ORNOT_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(A+(B)')"; }
	}
	cell(_OR_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(A+B)"; }
	}
	cell(_TBUF_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(E) { direction: input; }
	  pin(Y) { direction: output;
		   function: "A";
		   three_state: "E"; }
	}
	cell(_XNOR_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "((A^B))'"; }
	}
	cell(_XOR_) {
	  area: 4;
	  pin(A) { direction: input; }
	  pin(B) { direction: input; }
	  pin(Y) { direction: output;
		   function: "(A^B)"; }
	}
}

