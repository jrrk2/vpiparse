#directory "/Users/jonathan/.opam/5.2.0/lib/hardcaml";;
#directory "/Users/jonathan/.opam/5.2.0/lib/base";;
#directory "/Users/jonathan/.opam/5.2.0/lib/hardcaml";;
#directory "/Users/jonathan/.opam/5.2.0/lib/xml-light";;
#directory "outputparser";;
#directory "hardcaml_of_verilog/_build/install/5.2.0/lib/hardcaml_of_verilog";;

open Xml
open Input
open Input_types
open Input_dump
open Input_hardcaml
open Dump_types
open Input_equiv_verilator
open Verible_pat
open Source_text_verible
open Verible_typ
open Generic_rewrite
open Convert_edited
open Source_generic_main
open Rtlil_input_rewrite_types

(*
let t s = List.map (List.map Source_text_rewrite_types.E.transparent) (Hashtbl.find sath s)
let tlst = t "mul[0]";;
*)

(*
let ind = Myluaclient.find_sat "itm7";;
let json = json' ind;;
*)

(*
let (ind,klst,itm) = List.hd !conlst;;
let w = Hashtbl.find ind.wires;;
let st = Hashtbl.find ind.stash;;

let stlst = let lst = ref [] in Hashtbl.iter (fun k x -> lst := (k,x) :: !lst) ind.stash; !lst;;

let s' = idx "$auto$maccmap.cc:114:fulladd$100.A" 11;;
*)


(*
open Rtl_parser
open Hardcaml
open Signal
open Input_cnv
open Source_generic_main
open Source_text_verible_rewrite
*)

#print_length 1000000;;
#print_depth 1000000;;

(*
open File_rewrite
open Formula
open File
open Rtl_dump
open Rtl_map
open Input_pat4
open Input_equiv
let _ = tran "uhdm.txt"
let cell_param = ("\""^String.concat "\"|\"" (List.sort compare !truelst)^"\"");;
*)

(*
let v = "examples/ariane_preproc.sv";;
let v = "examples/picorv32_ref.v";;
let v = "outputparser/examples/count0.v";;
let v = "test/hardcaml/operators.sv";;
let v = "test/hardcaml/casetest4.sv";;
let v = "test/hardcaml/equal.sv";;
let v = "test/hardcaml/less_test.sv";;
let v = "test/hardcaml/casetest.sv";;
let v = "test/hardcaml/greater.sv";;
let v = "test/hardcaml/relational.sv";;
let v = "test/hardcaml/mux.sv";;
let v = "test/hardcaml/casetest8.sv";;
let v = "test/hardcaml/optest.sv";;
let v = "test/hardcaml/test_shl.sv";;
let v = "test/hardcaml/test_shl_const.sv";;
let v = "test/hardcaml/blocking_add.sv";;
let v = "test/hardcaml/blocking.sv";;
let v = "test/hardcaml/receiver.sv";;
let v = "test/hardcaml/types.sv";;
let v = "test/hardcaml/attributes-operator.sv";;
let v = "test/hardcaml/slib_fifo.sv";;
let v = "test/hardcaml/multiplier_test.sv";;
let v = "test/hardcaml/counter_test.sv";;
let v = "test/hardcaml/optest.sv";;

let _ = Input_equiv_verible.tran v;;
*)

(*
open Input_yosys

let liberty, cells = Rtl_map.read_lib "../outputparser/simcells";;
let form = snd !(Rtl_map.othf);;
Formula_rewrite.rewrite form;;

*)

(*
open Rtlil_input_rewrite
open Rtlil_input_rewrite_types
open Rtlil_input

let _,rtlil = parse (parse_output_ast_from_file "gnd.ilang")
let _ = Rtlil_dump.dumprtl "_junk" rtlil;;

let ilang = List.map (Cnv_ilang.cnv_ilang) !(Rtl_map.uitms);;
let _ = Rtlil_dump.dumprtl "_rev" ilang

let _ = dumprtl ilang;;
let str_rtl r = String.concat "\n" (List.map (fun (nam, lst) -> Rtlil_dump.dump_ilst "\n" lst) r)
let par = snd (Rtlil_input_rewrite.parse (Rtlil_input_rewrite.parse_output_ast_from_string (str_rtl ilang)))

let gold = snd (Rtlil_input_rewrite.parse (Rtlil_input_rewrite.parse_output_ast_from_pipe v))
let _ = Rtlil_dump.dumprtl "_gold" gold
let _ = Source_generic_main.rewrite_rtlil gold ilang
*)
